Description: fix for buffer overflow vulnerability in uresbund.cpp
Origin: upstream, http://bugs.icu-project.org/trac/changeset/35699
[rcs: backported to wheezy; the actual upstream change does not apply here since uresbund.c became uresbund.cpp by the time upstream got around to fixing it, so this patch implements a less elegant/robust fix that accomplishes the same effect of preventing the buffer overflow]
Index: icu-4.8.1.1/source/common/uresbund.c
===================================================================
--- icu-4.8.1.1.orig/source/common/uresbund.c	2016-12-15 21:21:49.561715402 +0000
+++ icu-4.8.1.1/source/common/uresbund.c	2016-12-16 11:42:48.312313159 +0000
@@ -1704,7 +1704,7 @@
             char path[256];
             char* myPath = path;
             const char* resPath = resB->fResPath;
-            int32_t len = resB->fResPathLen;
+            int32_t len = uprv_min(resB->fResPathLen, 256);
 
             while(res == RES_BOGUS && dataEntry->fParent != NULL) { /* Otherwise, we'll look in parents */
                 dataEntry = dataEntry->fParent;
@@ -1712,7 +1712,8 @@
 
                 if(dataEntry->fBogus == U_ZERO_ERROR) {
                     uprv_strncpy(path, resPath, len);
-                    uprv_strcpy(path+len, inKey);
+                    uprv_strncpy(path+len, inKey, 256-len);
+                    path[255] = '\0';
                     myPath = path;
                     key = inKey;
                     do {
